import builtins from "builtin-modules";
import esbuild from "esbuild";
import fs from "fs";
import path from "path";
import process from "process";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

let outfile = "main.js";
if (fs.existsSync('./.devtarget')) {
	outfile = path.join(fs.readFileSync('./.devtarget', 'utf8').trim(), outfile);
	console.log('Temporary output location:', outfile);
}


const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],

	// We don't need to include code to create zip files (deflate), only read them (inflate),
	// so this cuts it out and makes the final bundle smaller.
	alias: {'@zip.js/zip.js': '@zip.js/zip.js/lib/zip-no-worker-inflate.js'},
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	minify: prod,
	platform: 'browser',
	treeShaking: true,
	outfile,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
